import "OpenAIClient.idl";

namespace OpenAI
{
  [default_interface]
  runtimeclass Answer
  {
    Answer();
    Answer(String strValue);
    String Value;
    Double Confidence;
    Windows.Foundation.Uri Source;
  }


  [default_interface]
  runtimeclass Context
  {
    String OriginalQuestion {get; };
    UInt32 Step{ get; };

    Windows.Foundation.Collections.IMap<Guid, Object> Basket{ get; };
  }

  [default_interface]
  runtimeclass EngineStepEventArgs {
      Context Context {get; };
      String EndpointName{ get; };
      String Value{ get; };
    };

  runtimeclass Engine;


  interface ISkill
  {
    String Name { get; };
    Windows.Foundation.IAsyncOperation<Answer> ExecuteAsync(String question, Context context);
    Engine Engine;
  }


  delegate Windows.Foundation.IAsyncOperation<Answer> SkillHandlerAsync(String question, Context context, Engine engine);

  [default_interface]
  runtimeclass Skill : ISkill
  {
    Skill(String name, SkillHandlerAsync handler);
  }

    enum LogLevel
  {
    Informational,
    Warning,
    Error
  };

    struct Parameter
    {
      String Name;
      Windows.UI.Xaml.Interop.TypeName Type;
    };

    [default_interface]
    runtimeclass Engine
    {
        Engine();

        Windows.Foundation.Collections.IVector<ISkill> Skills{ get; };
        ISkill GetSkill(String name);

        UInt32 MaxSteps;
        
        Windows.Foundation.IAsyncOperation<Answer> AskAsync(String query);
        Windows.Foundation.IAsyncOperation<Answer> AskAsync(String query, Windows.Foundation.Collections.IMap<Guid, Object> basket);
        
        event Windows.Foundation.TypedEventHandler<Engine, EngineStepEventArgs> EngineStepSend;
        event Windows.Foundation.TypedEventHandler<Engine, EngineStepEventArgs> EngineStepReceive;
        void Log(LogLevel level, String skillName, String message);
        event Windows.Foundation.TypedEventHandler<String, String> EventLogged;
        void ConnectSkills();

        Windows.Foundation.IAsyncOperation<Windows.Data.Json.JsonObject> ParseApiInputAsync(String input, Windows.Foundation.Collections.IVector<Parameter> params);

    }

}
