import "Choice.idl";
import "CompletionRequest.idl";
import "PromptTemplate.idl";

namespace OpenAI
{
  enum ChatRole
  {
    System,
    User,
    Assistant
  };

  runtimeclass ChatMessage
  {
    ChatMessage(ChatRole role, String content);
    ChatRole Role{ get; };
    String Content{ get; };
  };

  [default_interface]
  runtimeclass ChatRequest
  {
    ChatRequest();
    String Model;
    Windows.Foundation.Collections.IVector<ChatMessage> Messages;
    UInt32 MaxTokens;
    Double Temperature;
    Double TopP;
    UInt8 NCompletions;
    Boolean Stream;
  }
  
    [default_interface]
    runtimeclass OpenAIClient
    {
        OpenAIClient();
        String ApiKey;
        Windows.Foundation.Uri CompletionUri;

        Boolean UseBearerTokenAuthorization;
    
        Windows.Foundation.IAsyncOperation< Windows.Foundation.Collections.IVector<Choice> > GetCompletionAsync(String prompt, String model);
        Windows.Foundation.IAsyncOperation< Windows.Foundation.Collections.IVector<Choice> > GetCompletionAsync(CompletionRequest request);
        
        Windows.Foundation.Uri EmbeddingUri;
        Windows.Foundation.IAsyncOperation< Windows.Foundation.Collections.IVector<Double> > GetEmbeddingAsync(String prompt);

        PromptTemplate CreateTemplate(String prompt);
        FewShotTemplate CreateFewShotTemplate(Windows.Foundation.Collections.IVectorView<String> parameters);
        
        Windows.Foundation.IAsyncOperation< Windows.Foundation.Collections.IVector<Choice> > GetChatResponseAsync(ChatRequest request);
    }

    enum Similarity
    {
      Cosine,
      L1,
      L2,
      Linf
    };
    [default_interface]
    runtimeclass EmbeddingUtils
    {
      static Double EmbeddingDistance(Windows.Foundation.Collections.IVectorView<Double> v1, Windows.Foundation.Collections.IVectorView<Double> v2, Similarity similarity);
      static Double EmbeddingDistance(Windows.Foundation.Collections.IVectorView<Double> v1, Windows.Foundation.Collections.IVectorView<Double> v2);
    }

}
